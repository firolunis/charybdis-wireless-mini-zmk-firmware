#include <behaviors/mouse_keys.dtsi>
#include "macros.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <150>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;

            // hold, tap
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 10 ESC>, <&to 9>;

            // hold, tap, double_tap
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 0>, <&to 0>;

            // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mkp RCLK>, <&mo 10>;

            // tap/hold, double_tap
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 7>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
            layers = <0>;
        };

        MiddleClick {
            bindings = <&mkp MCLK>;
            key-positions = <28 37>;
        };

        RightClick {
            bindings = <&mkp RCLK>;
            key-positions = <16 37>;
        };

        BASE_or_EXTRAS {
            bindings = <&td_bore>;
            key-positions = <38 39>;
        };

        // GameLayer {
        //     bindings = <&tog 4>;
        //     key-positions = <8 9>;
        // };
        // PhotoLayer {
        //     bindings = <&tog 5>;
        //     key-positions = <2 3>;
        // };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define GAME    4
    // #define PHOTOS  5
    // #define EXTRAS  6
    // #define MOUSE   7
    // #define SLOW    8
    // #define SCROLL  9

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&trans  &hm N2 Q                  &hm N3 W        &hm N3 E    &hm N4 R          &hm N5 T                        &hm N6 Y                       &hm N7 U           &hm N8 I    &hm N9 O         &hm N0 P                       &trans
&trans  &hm LCTRL A               &hm LEFT_ALT S  &hm LCMD D  &hm LEFT_SHIFT F  &hm LA(LC(LG(LEFT_SHIFT))) G    &hm RA(RC(RG(RIGHT_SHIFT))) H  &hm RIGHT_SHIFT J  &hm RCMD K  &hm RIGHT_ALT L  &hm RCTRL SEMICOLON            &trans
&trans  &hm LA(LC(LEFT_SHIFT)) Z  &kp X           &kp C       &kp V             &lt 5 B                         &lt 6 N                        &kp M              &kp COMMA   &kp DOT          &hm RC(RA(RIGHT_SHIFT)) SLASH  &trans
                                                  &mkp LCLK   &lt 1 SPACE       &lt 3 BACKSPACE                 &lt 4 ESC                      &lt 2 ENTER
            >;
        };

        NUM {
            bindings = <
&trans  &hm LS(N2) N2                 &hm LS(N3) N3    &hm LS(N4) N4  &hm LS(N5) N5      &hm LS(N6) N6                    &hm LS(N7) N7                   &hm LS(N8) N8       &hm LS(N9) N9         &hm LS(N0) N0        &hm LS(MINUS) MINUS                   &trans
&trans  &hm LCTRL N1                  &hm LEFT_ALT F1  &hm LCMD F2    &hm LEFT_SHIFT F3  &hm LC(LA(LG(LEFT_SHIFT))) F4    &hm RA(RC(RG(RIGHT_SHIFT))) F5  &hm RIGHT_SHIFT F6  &hm RCMD PRINTSCREEN  &hm RIGHT_ALT EQUAL  &hm RCTRL LEFT_BRACKET                &trans
&trans  &hm LA(LC(LEFT_SHIFT)) GRAVE  &kp F7           &kp F8         &kp F9             &kp F10                          &kp F11                         &kp F12             &kp BACKSLASH         &kp RIGHT_BRACKET    &hm RA(RC(RIGHT_SHIFT)) SINGLE_QUOTE  &trans
                                                       &mkp RCLK      &none              &lt 5 DEL                        &lt 6 ESC                       &kp TAB
            >;
        };

        NUM2 {
            bindings = <
&trans  &hm LS(N2) N2                 &hm LS(N3) N3    &hm LS(N4) N4  &hm LS(N5) N5      &hm LS(N6) N6                    &hm LS(N7) N7                   &hm LS(N8) N8       &hm LS(N9) N9         &hm LS(N0) N0        &hm LS(MINUS) MINUS                   &trans
&trans  &hm LCTRL N1                  &hm LEFT_ALT F1  &hm LCMD F2    &hm LEFT_SHIFT F3  &hm LC(LA(LG(LEFT_SHIFT))) F4    &hm RA(RC(RG(RIGHT_SHIFT))) F5  &hm RIGHT_SHIFT F6  &hm RCMD PRINTSCREEN  &hm RIGHT_ALT EQUAL  &hm RCTRL LEFT_BRACKET                &trans
&trans  &hm LA(LC(LEFT_SHIFT)) GRAVE  &kp F7           &kp F8         &kp F9             &kp F10                          &kp F11                         &kp F12             &kp BACKSLASH         &kp RIGHT_BRACKET    &hm RA(RC(RIGHT_SHIFT)) SINGLE_QUOTE  &trans
                                                       &mkp RCLK      &kp TAB            &lt 5 DEL                        &lt 6 ESC                       &none
            >;
        };

        NAV {
            bindings = <
&trans  &kp K_UNDO    &kp PG_UP   &kp UP        &kp PG_DN     &kp LS(LC(TAB))    &studio_unlock  &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_NEXT  &kp RC(LEFT)   &trans
&trans  &kp HOME      &kp LEFT    &kp DOWN      &kp RIGHT     &kp END            &kp LEFT        &kp DOWN    &kp UP            &kp RIGHT   &kp RC(UP)     &trans
&trans  &td_clk_scrl  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp LC(TAB)        &kp HOME        &kp PG_DN   &kp PG_UP         &kp END     &kp RC(RIGHT)  &trans
                                  &mkp MCLK     &lt 5 TAB     &none              &kp ESC         &lt 6 TAB
            >;
        };

        NAV2 {
            bindings = <
&trans  &kp K_UNDO    &kp PG_UP   &kp UP        &kp PG_DN     &kp LS(LC(TAB))    &studio_unlock  &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_NEXT  &kp RC(LEFT)   &trans
&trans  &kp HOME      &kp LEFT    &kp DOWN      &kp RIGHT     &kp END            &kp LEFT        &kp DOWN    &kp UP            &kp RIGHT   &kp RC(UP)     &trans
&trans  &td_clk_scrl  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp LC(TAB)        &kp HOME        &kp PG_DN   &kp PG_UP         &kp END     &kp RC(RIGHT)  &trans
                                  &mkp MCLK     &lt 5 TAB     &kp DEL            &none           &lt 6 TAB
            >;
        };

        RAY {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        RAY2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        EXTRAS {
            bindings = <
&kp C_POWER      &shrug  &lgtm     &gcm      &none  &kp C_BRIGHTNESS_INC    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2       &bt BT_SEL 3     &out OUT_TOG     &bt BT_CLR
&kp C_SLEEP      &shit   &py_iter  &js_iter  &none  &kp C_BRIGHTNESS_DEC    &VSplit         &kp C_PREVIOUS  &kp C_PLAY_PAUSE   &kp C_STOP       &kp C_NEXT       &none
&kp C_AL_COFFEE  &none   &none     &none     &HSplit  &clip_hist              &new_dir      &kp K_MUTE      &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp PRINTSCREEN  &studio_unlock
                                   &none     &none  &none                   &none         &none
            >;
        };

        MOUSE {
            bindings = <
&none    &msc MOVE_LEFT  &msc MOVE_UP    &mmv MOVE_UP    &msc MOVE_DOWN   &msc MOVE_RIGHT    &none       &none            &none      &none         &none     &none
&kp TAB  &mkp MB4        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MB5           &none       &kp RIGHT_SHIFT  &kp RCTRL  &kp LEFT_ALT  &kp LCMD  &none
&none    &kp C_AC_UNDO   &kp C_AC_CUT    &kp C_AC_COPY   &kp C_AC_PASTE   &mkp MCLK          &none       &none            &none      &none         &none     &none
                                         &trans          &trans           &trans             &kp RETURN  &trans
            >;
        };

        SLOW {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
