#include <behaviors/mouse_keys.dtsi>
#include "macros.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// / {
//     chosen { zmk,matrix_transform = &default_transform; };
// };

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <175>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <150>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;

            // hold, tap
        };

        td_cursor: td_scroll_or_cursor {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 9 ESC>, <&to 8>;

            // hold, tap, double_tap
        };

        httl: ht_two_layers {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <125>;
        };

        td_layers: td_layer_swap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 0>, <&to 0>;

            // tap, double_tap, tripple_tap
        };

        td_clk_scrl: td_click_or_scroll {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&mkp RCLK>, <&mo 0>;

            // tap/hold, double_tap
        };

        td_bore: BASE_or_EXTRA {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mo 0>, <&to 0>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // GameLayer {
        //     bindings = <&tog 4>;
        //     key-positions = <8 9>;
        // };
        // PhotoLayer {
        //     bindings = <&tog 5>;
        //     key-positions = <2 3>;
        // };

        LSHIFTCOMBO {
            bindings = <&kp LSHIFT>;
            key-positions = <37 38>;
        };

        RSHIFTCOMBO {
            bindings = <&kp RSHIFT>;
            key-positions = <40 39>;
        };

        LCAPSWORD {
            bindings = <&caps_word>;
            key-positions = <4 3>;
        };

        RCAPSWORD {
            bindings = <&caps_word>;
            key-positions = <7 8>;
        };

        LBOOTLOAD {
            bindings = <&bootloader>;
            key-positions = <1 25>;
        };

        RBOOTLOAD {
            bindings = <&bootloader>;
            key-positions = <10 34>;
        };

        SCROLL {
            bindings = <&td_cursor>;
            key-positions = <37 36>;
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
    // #define BASE    0
    // #define NUM     1
    // #define NAV     2
    // #define SYM     3
    // #define GAME    4
    // #define PHOTOS  5
    // #define EXTRAS  6
    // #define MOUSE   7
    // #define SLOW    8
    // #define SCROLL  9

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&none  &hm N2 Q                  &hm N3 W        &hm N4 E    &hm N5 R          &hm N6 T                        &hm N7 Y                       &hm N8 U           &hm N9 I     &hm N0 O         &hm MINUS P                    &none
&none  &hm LCTRL A               &hm LEFT_ALT S  &hm LCMD D  &hm LEFT_SHIFT F  &hm LA(LC(LG(LEFT_SHIFT))) G    &hm RA(RC(RG(RIGHT_SHIFT))) H  &hm RIGHT_SHIFT J  &hm RCMD K   &hm RIGHT_ALT L  &hm RCTRL SEMICOLON            &none
&none  &hm LA(LC(LEFT_SHIFT)) Z  &lt 7 X         &lt 5 C     &lt 4 V           &lt 3 B                         &lt 3 N                        &lt 4 M            &lt 5 COMMA  &lt 7 DOT        &hm RC(RA(RIGHT_SHIFT)) SLASH  &none
                                                 &mkp LCLK   &lt 1 SPACE       &lt 2 BACKSPACE                 &lt 2 ESC                      &lt 1 ENTER
            >;
        };

        NUM {
            bindings = <
&none  &hm LS(N2) N2                 &hm LS(N3) N3    &hm LS(N4) N4  &hm LS(N5) N5      &hm LS(N6) N6                    &hm LS(N7) N7                   &hm LS(N8) N8       &hm LS(N9) N9         &hm LS(N0) N0        &hm LS(MINUS) MINUS                   &none
&none  &hm LCTRL N1                  &hm LEFT_ALT F1  &hm LCMD F2    &hm LEFT_SHIFT F3  &hm LC(LA(LG(LEFT_SHIFT))) F4    &hm RA(RC(RG(RIGHT_SHIFT))) F5  &hm RIGHT_SHIFT F6  &hm RCMD PRINTSCREEN  &hm RIGHT_ALT EQUAL  &hm RCTRL LEFT_BRACKET                &none
&none  &hm LA(LC(LEFT_SHIFT)) GRAVE  &kp F7           &kp F8         &kp F9             &kp F10                          &kp F11                         &kp F12             &kp BACKSLASH         &kp RIGHT_BRACKET    &hm RA(RC(RIGHT_SHIFT)) SINGLE_QUOTE  &none
                                                      &mkp RCLK      &kp TAB            &kp DEL                          &kp ESC                         &kp TAB
            >;
        };

        NAV {
            bindings = <
&none  &kp K_UNDO  &kp PG_UP   &kp UP        &kp PG_DN     &kp LS(LC(TAB))    &studio_unlock  &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_NEXT  &kp RC(LEFT)   &none
&none  &kp HOME    &kp LEFT    &kp DOWN      &kp RIGHT     &kp END            &kp LEFT        &kp DOWN    &kp UP            &kp RIGHT   &kp RC(UP)     &none
&none  &td_cursor  &kp K_MUTE  &kp C_VOL_DN  &kp C_VOL_UP  &kp LC(TAB)        &kp HOME        &kp PG_DN   &kp PG_UP         &kp END     &kp RC(RIGHT)  &none
                               &mkp MCLK     &kp TAB       &kp DELETE         &kp ESC         &kp TAB
            >;
        };

        RAY {
            bindings = <
&none  &kp F13             &kp F14       &kp F15   &kp F16     &kp F17                       &kp F18                     &kp F19     &kp F20   &kp F21        &kp F22             &none
&none  &kp LCTRL           &kp LEFT_ALT  &kp LCMD  &kp LSHIFT  &hm LA(LC(LG(LSHIFT))) F23    &hm RA(RC(RG(RSHIFT))) F24  &kp RSHIFT  &kp RCMD  &kp RIGHT_ALT  &kp RCTRL           &none
&none  &kp LA(LC(LSHIFT))  &none         &none     &none       &none                         &none                       &none       &none     &none          &kp RA(RC(RSHIFT))  &none
                                         &none     &none       &none                         &none                       &none
            >;
        };

        NP {
            bindings = <
&none  &kp KP_MINUS  &kp KP_N9  &kp KP_N8  &kp KP_N7  &kp KP_MULTIPLY    &kp KP_MULTIPLY  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &none
&none  &kp KP_PLUS   &kp KP_N6  &kp KP_N5  &kp KP_N4  &kp KP_DIVIDE      &kp KP_DIVIDE    &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &none
&none  &kp KP_ENTER  &kp KP_N3  &kp KP_N2  &kp KP_N1  &none              &none            &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &none
                                &none      &kp KP_N0  &kp KP_DOT         &kp KP_DOT       &kp KP_N0
            >;
        };

        MISC {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none
            >;
        };

        EXTRA {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none
            >;
        };

        BT {
            bindings = <
&none  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4     &none  &none  &none  &none  &none  &none
&none  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4    &none  &none  &none  &none  &none  &none
&none  &none          &none          &none          &none          &none            &none  &none  &none  &none  &none  &none
                                     &none          &none          &none            &none  &none
            >;
        };

        SLOW {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
